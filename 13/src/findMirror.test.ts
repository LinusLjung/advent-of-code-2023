import { Grid } from 'Grid';
import { describe, expect, it } from 'bun:test';
import { findMirror } from 'findMirror';

describe('findMirror()', () => {
  it.each<[Grid, number | null]>([
    [
      [
        '#.##..#',
        '..##...',
        '##..###',
        '#....#.',
        '.#..#.#',
        '.#..#.#',
        '#....#.',
        '##..###',
        '..##...',
      ],
      5,
    ],
    [
      [
        '.#.##.#',
        '#...###',
        '..#...#',
        '..##..#',
        '#...###',
        '##..##.',
        '##..##.',
        '#...###',
        '..##..#',
        '..#...#',
        '#...###',
      ],
      6,
    ],
    [
      [
        '#...###',
        '..#...#',
        '..##..#',
        '#...###',
        '##..##.',
        '##..##.',
        '#...###',
        '..##..#',
        '..#...#',
        '#...###',
        '.#.##.#',
      ],
      5,
    ],
    [
      [
        '#..##.#.#',
        '#..##.#.#',
        '#.##..#..',
        '.##....#.',
        '####...#.',
        '#.#.....#',
        '#.#.##...',
        '..#.#.#..',
        '#.#.#...#',
        '..#.##.##',
        '#.#.##.##',
      ],
      1,
    ],
    [
      [
        '#.#.##.##',
        '..#.##.##',
        '#.#.#...#',
        '..#.#.#..',
        '#.#.##...',
        '#.#.....#',
        '####...#.',
        '.##....#.',
        '#.##..#..',
        '#..##.#.#',
        '#..##.#.#',
      ],
      10,
    ],
    [
      [
        '#.#.#.##.#.',
        '......##...',
        '.#..#....#.',
        '#..#..##..#',
        '.#.#.#..#.#',
        '.##...##...',
        '.#.#......#',
        '.#.#......#',
        '.##...##...',
        '.#.#.#..#.#',
        '#..#..##..#',
        '.#..#....#.',
        '......##...',
        '#.#.#.##.#.',
        '#.#..####..',
        '##...###...',
        '#.###.##.##]',
      ],
      7,
    ],
    [
      [
        '####.#.',
        '..#..##',
        '.##.##.',
        '...#.#.',
        '##.###.',
        '..#....',
        '..###.#',
        '##.#.#.',
        '##.#.#.',
      ],
      8,
    ],
    [
      [
        '##.#.#.',
        '##.#.#.',
        '..###.#',
        '..#....',
        '##.###.',
        '...#.#.',
        '.##.##.',
        '..#..##',
        '####.#.',
      ],
      1,
    ],
    [
      [
        '.#..####..#',
        '#....##....',
        '..##....##.',
        '#..#....#..',
        '##..####..#',
        '.#..####..#',
        '#####..####',
      ],
      null,
    ],
    [
      [
        '###.....#...#',
        '..######.....',
        '..######.....',
        '###.....#...#',
        '####...#..##.',
        '#.#.#..######',
        '.#.##...#....',
        '.#.##...#...#',
        '#.#.#..######',
        '####...#..##.',
        '###.....#...#',
      ],
      2,
    ],
  ])('should return the mirror index, %#', (grid, expected) => {
    expect(findMirror(grid)).toBe(expected);
  });
});
